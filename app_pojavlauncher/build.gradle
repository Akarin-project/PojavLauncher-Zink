apply plugin: 'com.android.application'

def getDate() {
    return new Date().format('yyyyMMdd')
}

android {
    compileSdkVersion 30
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        customDebug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "net.kdt.pojavlaunch"

        // Oculus says to set this to 23, but we need at least 24 to use the libraries in this version of the NDK, and my Q2 is on 29
        // The original Quest is apparently 25, but I wonder if different regions are still on different versions
        // or something like that?
        // Also Vulkan 1.1 is only available on 28 and up. We could load the symbols properly, but this is easier.
        // FIXME switch down to 24 or 25 and implement the Vulkan symbol loading for the original quest
        minSdkVersion 28

        targetSdkVersion 29
        versionCode 156249
        versionName "3.3.1.1_rel_" + getDate()
        multiDexEnabled true //important

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
            }
        }

        ndk {
            abiFilters 'arm64-v8a' // can also use 'armeabi-v7a'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customDebug
        }

        release {
            // Don't set to true or java.awt will be a.a or something similar.
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // defaultConfig already set
            // multiDexEnabled = true
            // debuggable = true
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '30.0.3'

    // Include the launch helper JAR so we can extract it at runtime
    applicationVariants.all { variant ->
        variant.mergeAssets.configure {
            dependsOn ':launch_helper:jar'
            doLast {
                def launchHelperJar = project(':launch_helper').tasks.getByName('jar')
                def jarFile = launchHelperJar.archiveFile.get().asFile
                assert jarFile.exists()

                copy {
                    from([jarFile])
                    into(outputDir)
                }
            }
        }
    }
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'commons-codec:commons-codec:1.14'
    // implementation 'com.wu-man:android-bsf-api:3.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.browser:browser:1.3.0'

    implementation "androidx.constraintlayout:constraintlayout:2.0.4"


    // implementation 'com.intuit.sdp:sdp-android:1.0.5'
    // implementation 'com.intuit.ssp:ssp-android:1.0.5'

    implementation 'org.tukaani:xz:1.8'

    implementation 'net.objecthunter:exp4j:0.4.8'
    // implementation 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
